Creating a String in Java:

Using Character Array / ArrayList - Strings can be created by initializing a character array


char[] arr = ['g', 'e', 'e', 'k', 's'];


2. Using the String Class - The String class creates immutable strings. Once a string is created, its content cannot be modified. Operations like concatenation or changing the case of a string will create a new string object.

String literal

String s = “GeeksforGeeks”;


String str="geeks";


----


String s = new String (“GeeksforGeeks”);


-----------------------------


3. StringBuffer Class - The StringBuffer class creates mutable strings and is thread-safe. It is suitable for multithreaded environments where multiple threads might access the same string object.

StringBuffer s = new StringBuffer("GeeksforGeeks");



4. StringBuilder Class - The StringBuilder class is similar to StringBuffer but is not thread-safe. It is used in single-threaded environments to avoid the performance overhead of synchronization.



StringBuilder s = new StringBuilder("GeeksforGeeks");



5. length() : This method returns the number of characters in the string.

charAt() : The charAt() method returns the character at a specified index. Index starts from 0 (like arrays).


str.substring(start): Returns the substring from the start index to the end of the string.


str.substring(start, end) : Returns the substring from the start index to the end - 1 index.


-------------------------------


//Methods in String

public class Test{
    public static void main(String args[]){
        String s="Geeks for Geeeks";
        System.out.println(s);
        System.out.println(s.length());
        System.out.println(s.charAt(3));
        System.out.println(s.substring(2,4));
        System.out.println(s.substring(2));
    }
}



-----------------------


Create String Objects using String literals:
------------------------------

When strings are created using literals, Java optimizes memory usage by storing them in a String Pool. 

If two string literals have the same content, 
they share the same memory location in the pool. However, when strings are created using the new keyword, they are stored in the heap memory, and each object gets a separate memory allocation, even if they have the same content.



public class Test{
    public static void main(String args[]){
        String s1="geek";
        String s2="geek";
        
        if(s1==s2)
        System.out.println("Yes");
        else
        System.out.println("No");
        
        String s3=new String("geek");
        
         if(s1==s3)
        System.out.println("Yes");
        else
        System.out.println("No");
         }
}






------


More functions on the String Class

contains() Method : The contains() method checks if a specific sequence of characters exists within a string. It returns true if the sequence is found, otherwise false



import java.util.*;
public class Test{
    public static void main(String args[]){
        String s1="Geeks for Geeks";
        String s2="Geeks";
        System.out.println(s1.contains(s2));
    }
}




equals() Method : The equals() method compares two strings for equality based on their content. It is case-sensitive.


import java.io.*;

class GFG {
    public static void main (String[] args) {
        String s1 = "GeeksforGeeks";
        String s2 = "GeeksforGeeks";

        // Compare s1 and s2 for equality
        System.out.println(s1.equals(s2));  
    }
}

-------------


compareTo() Method : The compareTo() method compares two strings lexicographically:

Returns 0 if both strings are equal.
Returns a positive value if the first string is lexicographically greater.
Returns a negative value if the first string is lexicographically smaller.





import java.io.*;

class GFG {
    public static void main (String[] args) {
        String s1 = "geeksforgeeks";
        String s2 = "for";

        // Compare s1 and s2
        int res = s1.compareTo(s2);

        if (res == 0)
            System.out.println("Same");
        else if (res > 0)
            System.out.println("s1 Greater");
        else
            System.out.println("s1 Smaller");
    }
}



------


indexOf() Method : The indexOf() method returns the starting index of the first occurrence of a specified substring within the string. If the substring is not found, it returns -1.


import java.io.*;

public class GFG {
    public static void main (String[] args) {
        String s1 = "geeksforgeeks";
        String s2 = "geek";

        // Find the starting index of s2 in s1
        System.out.println(s1.indexOf(s2));  
    }
}




---------

import java.io.*;

public class GFG {
    public static void main (String[] args) {
        String s1 = "geeksforgeeks";
        String s2 = "geek";
        
        // Concatenating "forgeeks" to s1
        s1 = s1 + "forgeeks";  // OR s1 = s1.concat("forgeeks");
        
        
        s1 = s1 + "forgeeks";

        // Find the starting index of s2 in s1
        System.out.println(s1.indexOf(s2));  
         System.out.println(s1);  
    }
}
---------------

String Methods

1. int length(): Returns the number of characters in the String.

"GeeksforGeeks".length();  // returns 13
2. Char charAt(int i): Returns the character at ith index.

"GeeksforGeeks".charAt(3); // returns  ‘k’
3. String substring (int i): Return the substring from the ith  index character to end.

"GeeksforGeeks".substring(3); // returns “ksforGeeks”
4. String substring (int i, int j): Returns the substring from i to j-1 index.

 "GeeksforGeeks".substring(2, 5); // returns “eks”
5. String concat( String str): Concatenates specified string to the end of this string.

 String s1 = ”Geeks”;
 String s2 = ”forGeeks”;
 String output = s1.concat(s2); // returns “GeeksforGeeks”
6. int indexOf (String s): Returns the index within the string of the first occurrence of the specified string.

 String s = ”Learn Share Learn”;
 int output = s.indexOf(“Share”); // returns 6
7. int indexOf (String s, int i): Returns the index within the string of the first occurrence of the specified string, starting at the specified index.

 String s = ”Learn Share Learn”;
 int output = s.indexOf("ea",3);// returns 13
8. Int lastIndexOf( String s): Returns the index within the string of the last occurrence of the specified string.

 String s = ”Learn Share Learn”;
 int output = s.lastIndexOf("a"); // returns 14
9. boolean equals( Object otherObj): Compares this string to the specified object.

 Boolean out = “Geeks”.equals(“Geeks”); // returns true
 Boolean out = “Geeks”.equals(“geeks”); // returns false
10. boolean  equalsIgnoreCase (String anotherString): Compares string to another string, ignoring case considerations.

 Boolean out= “Geeks”.equalsIgnoreCase(“Geeks”); // returns true
 Boolean out = “Geeks”.equalsIgnoreCase(“geeks”); // returns true
11. int compareTo( String anotherString): Compares two string lexicographically.

 int out = s1.compareTo(s2);  // where s1 ans s2 are
                             // strings to be compared

 This returns difference s1-s2. If :
 out < 0  // s1 comes before s2
 out = 0  // s1 and s2 are equal.
 out > 0   // s1 comes after s2.
12. int compareToIgnoreCase( String anotherString): Compares two string lexicographically, ignoring case considerations.

 int out = s1.compareToIgnoreCase(s2);  
// where s1 ans s2 are 
// strings to be compared

 This returns difference s1-s2. If :
 out < 0  // s1 comes before s2
 out = 0   // s1 and s2 are equal.
 out > 0   // s1 comes after s2.
Note- In this case, it will not consider case of a letter (it will ignore whether it is uppercase or lowercase).
13. String toLowerCase(): Converts all the characters in the String to lower case.

String word1 = “HeLLo”;
String word3 = word1.toLowerCase(); // returns “hello"
14. String toUpperCase(): Converts all the characters in the String to upper case.

String word1 = “HeLLo”;
String word2 = word1.toUpperCase(); // returns “HELLO”
15. String trim(): Returns the copy of the String, by removing whitespaces at both ends. It does not affect whitespaces in the middle.

String word1 = “ Learn Share Learn “;
String word2 = word1.trim(); // returns “Learn Share Learn”
16. String replace (char oldChar, char newChar): Returns new string by replacing all occurrences of oldChar with newChar.

String s1 = “feeksforfeeks“;
String s2 = “feeksforfeeks”.replace(‘f’ ,’g’); // returns “geeksgorgeeks”

-----------


import java.io.*;

public class GFG {
    public static void main (String[] args) {
        String s1 = "geeksforgeeks";
        String s2 = "geek";
        
        
        
        
        s1 = s1 + "forgeeks";

        // Find the starting index of s2 in s1
        System.out.println(s1.indexOf(s2));  
         System.out.println(s1);  
         
         System.out.println(s1.length());  
         System.out.println(s1.charAt(3));  
         System.out.println(s1.substring(2));  
         
         System.out.println(s1.substring(2,3));  
         
         System.out.println(s1.concat(s2));  
         System.out.println(s1.indexOf("geeks"));  
         
         System.out.println(s1.lastIndexOf("f"));  
         
         System.out.println(s1.replace('f','g'));  
         
         
         
    }
}



----------------------------------------













